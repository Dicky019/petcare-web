generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model PemesananLayanan {
    id                String              @id @default(cuid())
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    ///
    user              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId            String
    jenisLayanan      JenisLayanan
    namaHewan         String
    kategoriHewan     String
    umurHewan         String
    jenisKelaminHewan JenisKelaminHewan
    keluhan           String?
    hasilKonsultasi   String?
    status            Status
    tanggal           String
    pemesananTambahan PemesananTambahan[]

    ///
    // tambahanPemesanan String?
    ///

    jam String
}

model PemesananTambahan {
    id                 String            @id @default(cuid())
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @updatedAt
    value              String
    jenisLayanan       JenisLayanan
    PemesananLayanan   PemesananLayanan? @relation(fields: [pemesananLayananId], references: [id])
    pemesananLayananId String?
}

enum JenisKelaminHewan {
    jantan
    betina
}

enum JenisLayanan {
    grooming
    kesehatan
    konsultasi
}

////

enum Status {
    pending
    processing
    success
    failed
}

model JadwalLayanan {
    id           String       @id @default(cuid())
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    jam          String
    hari         Hari
    jenisLayanan JenisLayanan
}

enum Hari {
    senin
    selasa
    rabu
    kamis
    jumat
    // sabtu
    // minggu
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String             @id @default(cuid())
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    name             String?
    email            String?            @unique
    emailVerified    DateTime?
    image            String
    noHP             String
    isActive         Boolean            @default(true)
    role             UserRole           @default(user)
    accounts         Account[]
    sessions         Session[]
    PemesananLayanan PemesananLayanan[]
}

enum UserRole {
    admin
    user
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

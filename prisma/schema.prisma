// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model LayananGrouming {
    id                 String           @id @default(cuid())
    ///
    pilihJamGrouming   PilihJamGrouming
    PemesananLayanan   PemesananLayanan @relation(fields: [pemesananLayananId], references: [id],onUpdate: Cascade, onDelete: Cascade)
    pemesananLayananId String           @unique
}

enum PilihJamGrouming {
    jam09_12
    jam10_14
    jam14_17
    jam16_19
}

model LayananKesehatan {
    id                 String                      @id @default(cuid())
    createdAt          DateTime                    @default(now())
    updatedAt          DateTime                    @updatedAt
    ///
    pilihJamKesehatan  PilihJamKesehatanKonsultasi
    PemesananLayanan   PemesananLayanan            @relation(fields: [pemesananLayananId], references: [id],onUpdate: Cascade, onDelete: Cascade)
    pemesananLayananId String                      @unique
}

model LayananKonsultasi {
    id                 String                      @id @default(cuid())
    createdAt          DateTime                    @default(now())
    updatedAt          DateTime                    @updatedAt
    ///
    pilihJamKesehatan  PilihJamKesehatanKonsultasi
    PemesananLayanan   PemesananLayanan            @relation(fields: [pemesananLayananId], references: [id],onUpdate: Cascade, onDelete: Cascade)
    pemesananLayananId String                      @unique
}

enum PilihJamKesehatanKonsultasi {
    jam09_10
    jam10_11
    jam12_13
    jam13_14
    jam14_15
    jam15_16
    jam16_17
    jam17_18
    jam18_19
    jam19_20
    jam20_21
}

model PemesananLayanan {
    id                String             @id @default(cuid())
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    ///
    user              User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId            String
    jenisLayanan      JenisLayanan
    namaHewan         String
    kategoriHewan     String
    umurHewan         String
    jenisKelaminHewan JenisKelaminHewan
    keluhan           String
    noHP              String
    status            Status
    ///
    LayananGrouming   LayananGrouming?
    LayananKesehatan  LayananKesehatan?
    LayananKonsultasi LayananKonsultasi?
}

enum JenisKelaminHewan {
    jantan
    betina
}

enum JenisLayanan {
    grooming
    kesehatan
    konsultasi
}

////

enum Status {
    pending
    processing
    success
    failed
}

model JadwalLayanan {
    id           String       @id @default(cuid())
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    jam          String
    hari         Hari
    jenisLayanan JenisLayanan
}

enum Hari {
    senin
    selasa
    rabu
    kamis
    jumat
    // sabtu
    // minggu
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String             @id @default(cuid())
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    name             String?
    email            String?            @unique
    emailVerified    DateTime?
    image            String?
    isActive         Boolean            @default(false)
    accounts         Account[]
    sessions         Session[]
    PemesananLayanan PemesananLayanan[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
